<pre class='metadata'>
Title: Cross-Origin Embedding Policy
Shortname: coep
Level: 1
Status: DREAM
Editor: Mike West 56384, Google Inc., mkwst@google.com
Markup Shorthands: markdown yes
Abstract:
    In order to support interesting and powerful APIs in a post-Spectre world, it seems necessary
    to ensure that resoures are only voluntarily embedded into a potentially-dangerous context.
    This document sketches out a potential opt-in mechanism which relies upon explicit declaration
    of a `Cross-Origin-Resource-Policy` for each embedded resource, defined as a series of
    monkey-patches against HTML and Fetch which are intended to be upstreamed.
</pre>
<pre boilerplate="copyright">&copy;2019, Google, Inc. All rights reserved.</pre>

<pre class="biblio">
{
  "spectre": {
    "authors": [
      "Paul Kocher", "Jann Horn", "Anders Fogh", "Daniel Genkin", "Daniel Gruss", "Werner Haas", "Mike Hamburg", "Moritz Lipp", "Stefan Mangard", "Thomas Prescher", "Michael Schwarz", "Yuval Yarom"
    ],
    "href": "https://spectreattack.com/spectre.pdf",
    "title": "Spectre Attacks: Exploiting Speculative Execution"
  },

  "chromium-post-spectre-rethink": {
    "authors": [ "The Chromium Project" ],
    "href": "https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md",
    "title": "Post-Spectre Threat Model Re-Think"
  },

  "I-D.ietf-httpbis-header-structure": {
    "authors": [ "Mark Nottingham", "Poul-Henning Kamp" ],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure",
    "title": "Structured Headers for HTTP",
    "status": "ID",
    "publisher": "IETF"
  }
}
</pre>

<pre class="anchors">
urlPrefix: https://tc39.es/ecma262/; spec: ECMASCRIPT
    text: SharedArrayBuffer; type: interface; url: sec-sharedarraybuffer-objects
urlPrefix: https://tools.ietf.org/html/draft-ietf-httpbis-header-structure; spec: I-D.ietf-httpbis-header-structure
    type: dfn
        text: structured header; url: #
    for: structured header
        type: dfn
            text: dictionary; url: #section-3.1
            text: token; url: #section-3.9
            text: boolean; url: #section-3.11
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
        text: Structured Header parsing algorithm; url: #section-4.2.7
urlPrefix: https://html.spec.whatwg.org/
    type: dfn
        text: top-level browsing context group; url: multipage/browsers.html#tlbc-group
    type: abstract-op
        text: initialize the Document object; url: multipage/browsing-the-web.html#initialise-the-document-object
        text: create a new browsing context; url: multipage/browsers.html#creating-a-new-browsing-context
</pre>

<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dfn; text: cors check
spec:url; type:dfn; for:/; text:url
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; text:environment
spec:html; type:dfn; text: browsing context group
spec:fetch; type:dfn; for:/; text:response
</pre>

Introduction {#intro}
=====================

The same-origin policy's restrictions against direct access to another origin's resources is,
unfortunately, insufficient in the face of speculative execution attacks like [[spectre]]. Merely
_loading_ another origins' resource may be enough to bring its content into a memory space which
may be probed by an attacker, even if the browser would otherwise prevent access to the resource
through explicit channels.

Given this context, user agents are rethinking the threat model under which they operate (e.g.
[[chromium-post-spectre-rethink]]). It would be unfortunate indeed to prevent the web platform from
legitimately using APIs like {{SharedArrayBuffer}} that accidentally improve attackers' ability to
exploit speculation attacks, but at the same time, many user agents have agreed that it seems
unreasonable to enable those APIs without additional mitigation.

The approach sketched out in this document tackles one piece of the broader problem by giving
developers the ability to require an explicit opt-in from any resource which would be embedded in
a given context. User agents can make that requirement a precondition for some APIs that might
otherwise leak data about cross-origin resources, which goes some way towards ensuring that any
leakage is voluntary, not accidental.

To that end, this proposal does three things:

1.  It introduces a new `cross-site` value for the <a http-header>`Cross-Origin-Resource-Policy`</a>
    HTTP response header, which constitutes an explicit declaration that a given resource may be
    embedded in cross-site contexts.

2.  It introduces a new `Cross-Origin-Embedding-Policy` header which shifts the default behavior for
    resources loaded in a given context to an opt-in model, in which cross-origin responses must
    either assert a <a http-header>`Cross-Origin-Resource-Policy`</a> header which allows the
    embedding, or pass a [=CORS check=].

3.  It extends <a http-header>`Cross-Origin-Resource-Policy`</a> to handle some <a>navigation
    requests</a> in order to deal reasonably with <{iframe}> embeddings and
    {{Window/open|window.open()}}.

Together, these would allow a user agent to gate access to interesting APIs (like the aforementioned
{{SharedArrayBuffer}}) on a top-level context opting-into `Cross-Origin-Embedding-Policy`, which in
turn gives servers the ability to inspect incoming requests and make reasonable decisions about
when to allow an embedding.

The rest of this document monkey-patches [[HTML]] and [[Fetch]] in order to document the details of
the bits and pieces discussed above.


Framework {#framework}
======================

`Cross-Origin-Embedding-Policy` HTTP Response Header {#COEP}
------------------------------------------------------------

The <dfn http-header>`Cross-Origin-Embedding-Policy`</dfn> HTTP response header field allows a
server to declare an embedding policy for a given document. It is a [=Structured Header=] whose
value MUST be a [=structured header/token=]. [[!I-D.ietf-httpbis-header-structure]] Its ABNF is:

```
Cross-Origin-Embedding-Policy = sh-token
```

The only currently valid `Cross-Origin-Embedding-Policy` value is "`require-corp`".

In order to support forward-compatibility with as-yet-unknown request types, user agents MUST ignore
this header if it contains an invalid value.




Integrations {#integrations}
============================

Integration with HTML {#integration-html}
-----------------------------------------

When creating a document, user agents MUST process any
<a http-header>`Cross-Origin-Embedding-Policy`</a> header delivered by the server, imposing any
restrictions it asserts. Likewise, user agents MUST also take into account the embedding policy
asserted by the document's opener or embedder, ensuring that they're properly imposed as well. To do
so, HTML is patched as follows:

1.  {{Document}} objects are given an <dfn for="document">embedding policy</dfn>, whose value is
    either "`none`", or "`require-corp`". By default, its value is "`none`".

2.  [=Browsing context=] objects are given an associated <dfn for="browsing context">creator
    embedding policy</dfn>, wose value is either "`none`", or "`require-corp`". By default, its
    value is "`none`".

3.  The [$create a new browsing context$] algorithm sets the [=document/embedding policy=] for
    a browsing context's initial `about:blank` document by:

    1.  Persisting the |creator| {{Document}}'s [=document/embedding policy=] on the newly created
        [=browsing context=]'s [=browsing context/creator embedding policy=] in step 2 of the
        existing algorithm.

    2.  Adding a new step directly after Referrer Policy is initialized in step 11 of the existing
        algorithm  which will copy any creator document's policy:

        > 12.  Set |document|'s [=document/embedding policy=] to <var ignore>browsingContext</var>'s
        >      [=browsing context/creator embedding policy=].

4.  The [$initialize the Document object$] algorithm sets the [=document/embedding policy=] for
    {{Document}}s to which a [=browsing context=] is navigated by adding a new step directly after
    Referrer Policy is initialized in step 6:

    > 7.  [$Initialize a Document's embedding policy from a response$] given
    >     <var ignore>document</var> and <var ignore>response</var>.

Each document's [=document/embedding policy=] will be set to "`require-corp`" if it's embedded
in a document whose [=document/embedding policy=] is "`require-corp`"

Initializing a `Document`'s Embedding Policy {#initialize-embedding-policy}
---------------------------------------------------------------------------

<div algorithm="to initialize a Document's embedding policy from a response">
To <dfn abstract-op>initialize a Document's embedding policy from a response</dfn>, given a
{{Document}} object (|document|) and a [=response=] (|response|):


1.  Let |policy| be "`none`".

2.  Let |parsed-policy| be the result of executing the [$Structured Header parsing algorithm$] with
    <var ignore>input_string</var> set to the result of [=extracting header values=] given
    `Cross-Origin-Embedding-Policy` and |response|'s [=response/header list=], and
    <var ignore>header_type</var> set to "`item`".

    Issue: If we get a malformed header (as opposed to a header that contains an unknown token),
    should we fail closed (e.g. "`require-corp`") or open (e.g. "`none`")?

3.  If |parsed-policy| is "`require-corp`", set |policy| to "`require-corp`".

4.  Let |context| be |document|'s [=browsing context=].

5.  If |context| is a [=nested browsing context=]:

    1.  Let |parent| be the {{Document}} [=nested through|through which=] |context| is nested.

    2.  If |parent|'s [=document/embedding policy=] is "`require-corp`", set |policy| to
        "`require-corp`".

6.  If |context| is an [=auxiliary browsing context=]:

    1.  Let.

</div>

ISSUE: Not sure if this is the right integration between Fetch's understanding of header values
and Structured Headers. Perhaps Fetch should be doing more work here?

The <a http-header>`Cross-Origin-Resource-Policy`</a> HTTP response header aims to give servers
the ability to mitigate this risk by explicitly declaring the scope in which a given resource is
expected to be available to "`no-cors`" requests. Servers can prevent cross-origin/-site
embeddings by asserting `Cross-Origin-Resource-Policy: same-origin` or
`Cross-Origin-Resource-Policy: same-site` respectively, which provides the user agent with enough
context to ensure that the resource never enters a process which might be controlled by another
party. 

As currently defined, this mechanism is a purely opt-in hardening mechanism. 

This document proposes an extension to this opt-in mechanism that would give an embedding context
the ability to assert 


Implementation Considerations {#impl-considerations}
====================================================

Why not require CORS instead? {#why-not-cors}
---------------------------------------------

An earlier version of this propsal leaned on CORS rather than CORP. Why didn't we run with that
model instead?

This proposal posits that there's a meaningful distinction between a server's assertions that "You,
vague acquaintance, may embed me." and "You, dearest friend, may read me."
`Cross-Origin-Resource-Policy` grants no explicit access to a resources' content, unlike CORS, and
seems like it's just good-enough to support the explicit declaration of embeddableness that this
proposal requires. CORS goes further, and especially in the short-term it seems that there's real
risk in developers blindly enabling CORS in order to meet the embedding requirements we want to
impose here, opening themselves up to direct attack in the process.

That is, it seems likely that some subset of developers would implement a CORS requirement in the
simplest way possible, by reflecting the `Origin` header in an `Access-Control-Allow-Origin` header.
If these resources contain interesting data about users (as advertisements, for example, are wont to
do), then it's possible that data will end up being more widely available than expected.

CORP does not create the same risk. It seems strictly lower-privilege than CORS, and a reasonable
place for us to start.

Forward-compatibility {#forward-compat}
---------------------------------------

The header defined in this document is small and single-purpose, which is a real advantage for
comprehensibility. I wonder, however, if an extensible alternative would be reasonable. For
example, if we're serious about moving to credentialless requests, it would be annoying to do so by
defining yet another header. Perhaps something more generic that accepts a
[=structured header/dictionary=] rather than a single token? That is:

```
Embedee-Policy: opt-in=required, credentials=cors-only
```

Perhaps it will be possible to do everything we want by defining a new tokens, but I worry a bit
that we'll follow [[Referrer-Policy]] into some pretty convoluted token names if we go that route.
Splitting out the axes along which we'd like to make decisions seems like it might be a good
strategy to consider.
